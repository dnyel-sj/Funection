# تابع m(i) برای محاسبه مقدار m(i) با استفاده از سری هارمونیک متناوب

def m(i):
  """
  محاسبه مقدار m(i) برای یک عدد صحیح i غیرمنفی

  Args:
      i: عدد صحیح غیرمنفی مورد نظر

  Returns:
      مقدار m(i) محاسبه شده با استفاده از سری هارمونیک متناوب و بازگشت بازگشتی
  """
  if i <= 0:
    return 0
  else:
    return 4 * (1 / (2 * i - 1) - 1 / (2 * i)) + m(i - 1)

# تابع pi_estimate(iterations) برای تخمین عدد پی با استفاده از سری هارمونیک متناوب

def pi_estimate(iterations):
  """
  تخمین عدد پی با استفاده از سری هارمونیک متناوب

  Args:
      iterations: تعداد تکرارها برای محاسبه دقیق تر

  Returns:
      تخمین عدد پی محاسبه شده با استفاده از m(iterations) و ضرب در 4
  """
  return 4 * m(iterations)

# تابع اصلی main() برای چاپ جدول i و تخمین های عدد پی

def main():
  """
  چاپ جدول i و تخمین های عدد پی با مقادیر i و m از تصویر
  """
  i_values = [1, 101, 201, 301, 401, 501, 601, 701, 801, 901]  # مقادیر i از تصویر
  m_values = [4.0000, 3.1515, 3.1466, 3.1449, 3.1441, 3.1436, 3.1433, 3.1430, 3.1428, 3.1427]  # مقادیر m از تصویر

  print("i\tm(i)")  # عناوین ستون های جدول
  print("-" * 10)  # خط تیره برای جدا کردن عناوین

  for i, m in zip(i_values, m_values):  # حلقه for برای مقادیر i و m از لیست ها
    pi_approx = pi_estimate(i)  # محاسبه تخمین عدد پی با i فعلی
    print(f"{i}\t{m:.4f}\t{pi_approx:.5f}")  # چاپ i، m و تخمین عدد پی

if __name__ == "__main__":
  main()
